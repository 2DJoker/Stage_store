generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
    id  Int @id @default(autoincrement())

    fullName    String
    email       String @unique
    password    String
    role UserRole @default(USER)
    verified DateTime

    provider String?
    providerId String? 

    cart Cart?
    orders Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {

    id Int @id @default(autoincrement())
    name String @unique

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
  id        Int       @id @default(autoincrement())
  name      String
  imageUrl  String
  category  Category  @relation(fields: [categoryId], references: [id])
  categoryId Int
  price       Float?   // или Decimal
  dewuSpuId   String?  // для связки с Dewu API

  sizeType   SizeType  @default(NONE)

  sizes     Size[]    @relation("ProductSizes")
  sizeCls   SizeCl[]  @relation("ProductSizeCls")

  items     ProductItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductItem {
  id         Int      @id @default(autoincrement())
  price      Int
  sizeLabel String? // для текстовых, например "OneSize"

  product    Product  @relation(fields: [productId], references: [id])
  productId  Int

  sizeId     Int?     
  size       Size?    @relation(fields: [sizeId], references: [id])

  sizeClId   Int?     
  sizeCl     SizeCl?  @relation(fields: [sizeClId], references: [id])

  oneSizeId  Int?     
  oneSize    OneSize? @relation(fields: [oneSizeId], references: [id])

  cartItems  CartItem[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Size {
  id        Int       @id @default(autoincrement())
  name      String

  products  Product[] @relation("ProductSizes")
  cartItems CartItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  ProductItem ProductItem[]
}

model SizeCl {
  id        Int       @id @default(autoincrement())
  name      String

  products  Product[] @relation("ProductSizeCls")
  cartItems CartItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  ProductItem ProductItem[]
}

model OneSize {
  id           Int           @id @default(autoincrement())
  name         String

  productItems ProductItem[]
  cartItems    CartItem[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


model Cart {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int @unique

    items CartItem[]

    token String?

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productItem ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int

    sizes     Size[]

    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    SizeCl SizeCl[]

    OneSize OneSize[]
}

model Order {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status OrderStatus
    paymentId String?

    items Json 

    fullName String
    email String
    phone String
    address String
    comment String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique

    code String @unique

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELED
}

enum UserRole {
    USER 
    ADMIN
}

enum SizeType {
  SHOE
  CLOTH
  NONE
}
